//==============================================================================
// Notes
//==============================================================================
// drivers::mod.rs

//==============================================================================
// Crates and Mods
//==============================================================================
pub mod battery;
pub mod button;
pub mod clock;
pub mod lcd;
pub mod log;
pub mod touch;

use crate::app::info;

//==============================================================================
// Enums, Structs, and Types
//==============================================================================


//==============================================================================
// Variables
//==============================================================================


//==============================================================================
// Public Functions
//==============================================================================
#[allow(dead_code)]
pub enum DriversState{
	BusyLcd,
	
	Idle,
}

//==============================================================================
// Public Functions
//==============================================================================
pub fn init() {
	// Must be initialized in this order
	lcd::lcd_api::init();
	log::init();
	
	battery::init();
	button::init();
	clock::init();
	touch::init();
}

pub fn get_busy() -> DriversState {
    if lcd::lcd_api::get_busy() {
        return DriversState::BusyLcd;
    }

    DriversState::Idle
}

//==============================================================================
// Interrupt Handler
//==============================================================================


//==============================================================================
// Task Handler
//==============================================================================
pub fn task_handler(d: &mut info::DeviceInfo){
	log::task_handler(d);
	battery::task_handler(d);
	button::task_handler(d);
	clock::task_handler(d);
	touch::task_handler(d);
}